import { app, BrowserWindow, ipcMain } from 'electron';
import Veiculo from './entity/Veiculo';
import VeiculoRepository from './repository/VeiculoRepository';
import Usuario from './entity/Usuario';
import UsuarioRepository from './repository/UsuarioRepository';
import { compare, hash } from 'bcrypt';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const DETALHES_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL("http://localhost:3000/login");

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


ipcMain.handle('create', async (event: any, veiculo: any) => {
  console.log(veiculo)
  const {id, motor, cor, cambio, qtd_portas, bancos, rodas} = veiculo;
  const novoVeiculo = new Veiculo(motor, cor, cambio, qtd_portas, bancos, rodas, id);
  await new VeiculoRepository().save(novoVeiculo);  //cria e ja usa

})

ipcMain.handle('findAll', async () => {
  return await new VeiculoRepository().findAll();
})

ipcMain.handle('findById', async (event: any, id: any) => {
  return await new VeiculoRepository().findById(id);
})

ipcMain.handle('deletarVeiculo', async(event:any, id: any) => {
  await new VeiculoRepository().delete(id);
})

ipcMain.handle('createUsuario', async (_: any, usuario: any) => {
  const { name, email, password, data_nascimento } = usuario;
  const password_hash = await hash(password, 12);
  const newUsuario = new Usuario(name, email, password_hash, data_nascimento);
  await new UsuarioRepository().save(newUsuario);
})

ipcMain.handle('findByEmail', async (_: any, email: string) => {
  return await new UsuarioRepository().findByEmail(email);
})

ipcMain.handle('hash_password', async (_: any, credentials: any) => {
  const {password, password_hash} = credentials;
  return await compare(password, password_hash);

})

ipcMain.on("trocaPagina", (_:any, id: string) =>{
  mainWindow.loadURL(DETALHES_WEBPACK_ENTRY + `?id=${id}`)
})

ipcMain.on("trocaParaPrincipal", () =>{
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
})