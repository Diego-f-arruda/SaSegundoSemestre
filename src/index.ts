import { app, BrowserWindow, ipcMain, ipcRenderer } from 'electron';
import Estoque from './entity/Estoque';
import EstoqueRepository from './repository/EstoqueRepository';
import Usuario from './entity/Usuario';
import UsuarioRepository from './repository/UsuarioRepository';
import { compare, hash } from 'bcrypt';
import VeiculoRepository from './repository/VeiculoRepository';
import Veiculo from './entity/Veiculo';
import { Client } from 'pg';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const HOMESCREEN_WEBPACK_ENTRY: string;
declare const HOMESCREEN_PRELOAD_WEBPACK_ENTRY: string;
declare const STOCKREGISTRATION_WEBPACK_ENTRY: string;
declare const PRODUCTION_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: HOMESCREEN_PRELOAD_WEBPACK_ENTRY,
    },
    
  });

  // and load the index.html of the app.
  mainWindow.loadURL("http://localhost:3000/login");

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


ipcMain.handle('create', async (event: any, estoque: any) => {
  console.log(estoque)
  const {id, nome, fabricante, tipo, quantidade, dataEntrada, custo} = estoque;
  const novoEstoque = new Estoque(nome, fabricante, tipo, quantidade, dataEntrada, custo, id);
  await new EstoqueRepository().save(novoEstoque);  //cria e ja usa

})

ipcMain.handle('findAll', async () => {
  return await new EstoqueRepository().findAll();
})

ipcMain.handle('findAllEstoque', async () => {
  return await new EstoqueRepository().findAllEstoque();
})

ipcMain.handle('findById', async (event: any, id: any) => {
  return await new EstoqueRepository().findById(id);
})



ipcMain.handle('createUsuario', async (_: any, usuario: any) => {
  const { name, email, password, data_nascimento } = usuario;
  const password_hash = await hash(password, 12);
  const newUsuario = new Usuario(name, email, password_hash, data_nascimento);
  await new UsuarioRepository().save(newUsuario);
})

ipcMain.handle('createVeiculo', async (event: any, veiculo: any) => {
  const { id, modelo, fabricante, placa, anoFabricacao, acessorios } = veiculo;

    const novoVeiculo = new Veiculo(modelo, fabricante, placa, anoFabricacao);
    const savedVeiculo = await new VeiculoRepository().save(novoVeiculo);
    await new VeiculoRepository().save(novoVeiculo);

    if (!savedVeiculo.getId()) {
      throw new Error("Erro ao salvar o veículo: id não foi gerado.");
    }

    if (acessorios && Array.isArray(acessorios)) {
      for (const acessorioId of acessorios) {
        await new VeiculoRepository().estoqueDoVeiculo(savedVeiculo.getId(), acessorioId);
      }
    }
    return savedVeiculo;
});


ipcMain.handle('findByEmail', async (_: any, email: string) => {
  return await new UsuarioRepository().findByEmail(email);
})

ipcMain.handle('hash_password', async (_: any, credentials: any) => {
  const {password, password_hash} = credentials;
  return await compare(password, password_hash);

})

ipcMain.on("stockregistration", (_:any, id: string) =>{
  mainWindow.loadURL(STOCKREGISTRATION_WEBPACK_ENTRY)
})

ipcMain.on("homescreen", () =>{
  mainWindow.loadURL(HOMESCREEN_WEBPACK_ENTRY)
})

ipcMain.on("production", () => {
  mainWindow.loadURL(PRODUCTION_WEBPACK_ENTRY);
})


ipcMain.on('findAllVeiculos', async (event) => {
  const result = await pool.query('SELECT modelo, COUNT(*) AS quantidade FROM veiculo GROUP BY modelo');
  event.reply('findAllVeiculosResponse', result.rows);  
});

ipcMain.on('findAcessoriosPorPeriodo', async (event) => {
  const result = await pool.query(`
    SELECT TO_CHAR(veiculo_estoque.data_utilizacao, 'YYYY-MM') AS periodo, 
           SUM(veiculo_estoque.quantidade_usada) AS quantidade
    FROM veiculo_estoque
    GROUP BY periodo
    ORDER BY periodo
  `);
  event.reply('findAcessoriosPorPeriodoResponse', result.rows); 
});
